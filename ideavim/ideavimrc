" :actionlist - See a list of all IDE :action bindings possible
" you can reload your vimrc with the 'IdeaVim.ReloadVimRc.reload' action

" :actionlist
" Find IDE actions by name or keymap pattern (e.g. :actionlist extract, :actionlist <C-D>)

" :action NAME
" Execute an action named NAME

" Map \r to the Reformat Code action
" :map \r :action ReformatCode<CR>

" https://github.com/JetBrains/ideavim/blob/master/doc/set-commands.md
" For links, check this page on the GitHub repository

" Enable ideajoin package
set ideajoin

" Enable surround package
set surround

" Replace the error bell with a visual flash instead
set visualbell

" Enable commentary package
set commentary

" Enable normal mode in refactor dialogues
set ideavimsupport+=singleline

" Searches ignore case unless it contains capitalized letters
set ignorecase
set smartcase

" Keep a minimum of 5 columns above/below the cursor
set scrolloff=5
set sidescrolloff=10

" Maximum number of commands that are remembered in history
set history=10000

" Show 'relativenumber' values for rows above and below the cursor,
" but show the absolute 'number' on the cursor's current row
set number relativenumber

" Don't show the "V" icon in the status bar below the editor
" set ideastatusicon=disabled
set ideastatusicon=gray

" Start select mode instead of visual mode when using the mouse
" `selectmode`   This is a comma-separated list of words, which specify when to
" start Select mode instead of Visual mode, when a selection is started.
" Possible values:
set selectmode^=ideaselection
set selectmode^=key
set selectmode^=mouse

set ideawrite=file

set idearefactormode=visual

" Disable digraphs
set nodigraph

" Show current mode
set noshowmode

set keymodel=startsel

set nogdefault

" Only highlight the nearest match to the text contents in the search register
set nohlsearch

" Show incremental matches to a search currently being typed
set incsearch

" --------------------------------------------------------------------
" <https://github.com/JetBrains/ideavim/blob/master/doc/sethandler.md>
" Designate a handler for each key combinations.
" ====================================================================
" Default to designating the IDE as the handler for all key combinations.
sethandler a:ide
sethandler <C-]> a:ide
sethandler <C-\> a:ide
sethandler <C-/> a:ide

sethandler <C-2> a:ide
sethandler <C-S-2> a:ide
sethandler <C-S-6> a:ide

" Designate IdeaVim as the handler for particular key/mode combinations.
sethandler <C-a> a:vim
sethandler <C-c> a:vim
sethandler <C-[> a:vim
sethandler <C-v> a:vim
sethandler <C-w> a:ide
sethandler <C-b> a:vim
sethandler <C-r> a:vim

" nnoremap % :action EditorMatchBrace<CR>
" vnoremap % :action EditorMatchBrace<CR>

" nnoremap Y y$
" nnoremap <M-S-i> <Action>(IdeaVim.ReloadVimRc.reload)

" nnoremap n <Action>(FindNext)
" nnoremap N <Action>(FindPrevious)
" nnoremap / <Action>(Find)

" CloseProject
" nnoremap <C-w>q <Action>(CloseProject)
" CloseActiveTab
" nnoremap <C-w>c <Action>(CloseActiveTab)

" inoremap <A-f> <C-o>W
" inoremap <A-b> <C-o>B

vnoremap <M-Left> 0
vnoremap <M-Right> $
vnoremap <M-Up> gg
vnoremap <M-Down> G

vnoremap <A-f>W
vnoremap <A-b>B

vnoremap Q <C-v>
noremap Q <C-v>

nnoremap U <C-r>

vnoremap > >gv
vnoremap < <gv

inoremap <C-b> <Left>
inoremap <C-f> <Right>
inoremap <C-n> <Down>
inoremap <C-p> <Up>

" ------------------------------------------------------------------------------
" inoremap <A-BS> <Action>(EditorDeleteToWordStart)
" EditorDeleteToLineEnd
" inoremap <C-k> <Action>(EditorDeleteToLineEnd)
" EditorDeleteToLineStart
" inoremap <C-u> <Action>(EditorDeleteToLineStart)
" EditorDeleteToWordEnd
" inoremap <A-Del> <Action>(EditorDeleteToWordEnd)
" EditorDeleteToWordStart
" EditorBackspace
" inoremap <BS> <Action>(EditorBackspace)
" inoremap <S-BS> <Action>(EditorBackspace)
" inoremap <C-h> <Action>(EditorBackspace)
" EditorBackwardParagraph
" >> inoremap <> <Action>(EditorBackwardParagraph)
" EditorBackwardParagraphWithSelection
" >> inoremap <> <Action>(EditorBackwardParagraphWithSelection)
" EditorCodeBlockEnd
" inoremap <M-A-]> <Action>(EditorCodeBlockEnd)
" EditorCodeBlockEndWithSelection
" inoremap <M-A-S-]> <Action>(EditorCodeBlockEndWithSelection)
" EditorCodeBlockStart
" inoremap <M-A-[> <Action>(EditorCodeBlockStart)
" EditorCodeBlockStartWithSelection
" inoremap <M-A-S-[> <Action>(EditorCodeBlockStartWithSelection)
" EditorCopy
" inoremap <M-c> <Action>(EditorCopy)
" EditorCut
" inoremap <M-x> <Action>(EditorCut)
" EditorDelete
" inoremap <Del> <Action>(EditorDelete)
" inoremap <C-d> <Action>(EditorDelete)
" EditorDeleteLine
" >> inoremap <> <Action>(EditorDeleteLine)
" EditorDown
" inoremap <Down> <Action>(EditorDown)
" inoremap <C-n> <Action>(EditorDown)
" EditorDownWithSelection
" inoremap <S-Down> <Action>(EditorDownWithSelection)
" inoremap <C-S-n> <Action>(EditorDownWithSelection)
" EditorDecreaseFontSize
" inoremap <M--> <Action>(EditorDecreaseFontSize)
" EditorEnter
" inoremap <CR> <Action>(EditorEnter)
" inoremap <C-j> <Action>(EditorEnter)
" inoremap <C-m> <Action>(EditorEnter)
" EditorForwardParagraph
" >> inoremap <> <Action>(EditorForwardParagraph)
" EditorForwardParagraphWithSelection
" >> inoremap <> <Action>(EditorForwardParagraphWithSelection)
" EditorIncreaseFontSize
" inoremap <M-=> <Action>(EditorIncreaseFontSize)
" EditorIndentSelection
" inoremap <Tab> <Action>(EditorIndentSelection)
" EditorLeft
" inoremap <Left> <Action>(EditorLeft)
" inoremap <C-b> <Action>(EditorLeft)
" EditorLeftWithSelection
" inoremap <S-Left> <Action>(EditorLeftWithSelection)
" inoremap <C-S-b> <Action>(EditorLeftWithSelection)
" EditorLineEnd
" inoremap <M-Right> <Action>(EditorLineEnd)
" inoremap <C-e> <Action>(EditorLineEnd)
" EditorLineEndWithSelection
" inoremap <M-S-Right> <Action>(EditorLineEndWithSelection)
" inoremap <C-S-e> <Action>(EditorLineEndWithSelection)
" EditorLineStart
" inoremap <M-Left> <Action>(EditorLineStart)
" inoremap <C-a> <Action>(EditorLineStart)
" EditorLineStartWithSelection
" inoremap <M-S-Left> <Action>(EditorLineStartWithSelection)
" inoremap <C-S-a> <Action>(EditorLineStartWithSelection)
" EditorMatchBrace
" nnoremap % <Action>(EditorMatchBrace)
" EditorNextWord
" inoremap <A-Right> <Action>(EditorNextWord)
" inoremap <A-C-f> <Action>(EditorNextWord)
" EditorNextWordWithSelection
" inoremap <A-S-Right> <Action>(EditorNextWordWithSelection)
" inoremap <A-C-S-f> <Action>(EditorNextWordWithSelection)
" EditorPaste
" inoremap <M-v> <Action>(EditorPaste)
" EditorPasteSimple
" inoremap <M-A-S-v> <Action>(EditorPasteSimple)
" EditorPreviousWord
" inoremap <A-Left> <Action>(EditorPreviousWord)
" inoremap <A-C-b> <Action>(EditorPreviousWord)
" EditorPreviousWordWithSelection
" inoremap <A-S-Left> <Action>(EditorPreviousWordWithSelection)
" inoremap <A-C-S-b> <Action>(EditorPreviousWordWithSelection)
" EditorRight
" inoremap <Right> <Action>(EditorRight)
" inoremap <C-f> <Action>(EditorRight)
" EditorRightWithSelection
" inoremap <S-Right> <Action>(EditorRightWithSelection)
" inoremap <C-S-f> <Action>(EditorRightWithSelection)
" EditorSelectLine
" >> inoremap <> <Action>(EditorSelectLine)
" EditorSelectWord
" inoremap <A-Up> <Action>(EditorSelectWord)
" EditorSplitLine
" inoremap <M-CR> <Action>(EditorSplitLine)
" inoremap <C-o> <Action>(EditorSplitLine)
" EditorTab
" inoremap <Tab> <Action>(EditorTab)
" EditorTextEnd
" >> inoremap <> <Action>(EditorTextEnd)
" EditorTextEndWithSelection
" >> inoremap <> <Action>(EditorTextEndWithSelection)
" EditorTextStart
" >> inoremap <> <Action>(EditorTextStart)
" EditorTextStartWithSelection
" >> inoremap <> <Action>(EditorTextStartWithSelection)
" EditorUnindentSelection
" inoremap <S-Tab> <Action>(EditorUnindentSelection)
" EditorUnSelectWord
" inoremap <A-Down> <Action>(EditorUnSelectWord)
" EditorUp
" inoremap <Up> <Action>(EditorUp)
" inoremap <C-p> <Action>(EditorUp)
" EditorUpWithSelection
" inoremap <S-Up> <Action>(EditorUpWithSelection)
" inoremap <C-S-p> <Action>(EditorUpWithSelection)
" ---------------------------------------------------------
" NewDialogue
" nnoremap <C-w>n <Action> NewDialogue
" ---------------------------------------------------------
" ---------------------------------------------------------
" Find
" nnoremap / <Action>(Find)
" ---
" TODO normal mode

" Ensure that code folds work, 'zc' and whatnot
" as well as expanding to levels 1, 2, 3, 4, and 5 with the corresponding vi keyboard actions

" the 'go to the next highlighted error' command
" the 'go to the previous highlighted error' command

" the 'go to the previous VCS change'
" the 'go to the next VCS change'

" the 'go to next method' command
" the 'go to previous method' command

" the 'go to last edit location' command
" the 'go to next edit location' command

" Maybe make some clever commands for "go to type declaration, implementation, declaration or usages, super method, etc.


" ---
" TODO

" command-] = 'indent line or selection'
" command-[ = 'unindent line or selection'
" ---

" cnoremap <M-b> <S-Left>
" inoremap <M-d> <C-o>dW<Space>
" cnoremap <M-f> <S-Right>

" IdeaVim uses 'a' for alt instead of Vim's 'm'
" nmap <a-j> 15gj
" nmap <a-k> 15gk

" Allow pasting lines with readline keybindings
" cnoremap <C-Y> <C-R>-

" Allow formatting command with Option-Ctrl-f
" nnoremap <Leader><C-l> :action ReformatCode<CR>
" nnoremap <Leader><C-r> :action Run<CR>
" nnoremap <Leader><C-d> :action Debug<CR>
" nnoremap <Leader><C-f> :action RenameElement<CR>
" nnoremap <C-z>ActivateTerminalToolWindow

" Allow execution of the current file with Option-Ctrl-r
" nnoremap <M-C-r> :action Run<CR>

" Assume manpages are formatted with a width of 80

" Won't work in visual mode (with vmap) for some reason.
" Use default map of <c-/> for that.
" nmap gcc :action CommentByLineComment<cr>

" -----------------------------------------------------------------------------
" Suggested keybindings
" sethandler <c-j> a:vim
" sethandler <c-k> a:vim
" nnoremap <c-z> :action ToggleDistractionFreeMode<CR>
" nnoremap <c-t> :action ActivateTerminalToolWindow<CR>
" nnoremap <leader>t :action Terminal.OpenInTerminal<CR>
" nnoremap <c-\> :action SplitVertically<CR>
" nnoremap <c--> :action SplitHorizontally<CR>
" nnoremap <c-=> :action Unsplit<CR>
" nnoremap <c-m> :action MoveEditorToOppositeTabGroup<CR>
" nnoremap <c-h> <c-w>h
" nnoremap <c-l> <c-w>l
" nnoremap <c-j> <c-w>j
" nnoremap <c-k> <c-w>k
" nnoremap <TAB> :action PreviousTab<CR>
" nnoremap <s-TAB> :action NextTab<CR>
" nnoremap <Leader>en :action EditSourceInNewWindow<CR>
" nnoremap <Leader>n :action NextWindow<CR>
" nnoremap <Leader>q :action CloseContent<CR>
" nnoremap <Leader>qa :action CloseAllEditors<CR>
" vnoremap < <gv
" vnoremap > >gv
" nnoremap [[ :action MethodUp<CR>
" nnoremap ]] :action MethodDown<CR>
" nnoremap zc :action CollapseRegion<CR>
" nnoremap zo :action ExpandRegion<CR>
" nnoremap <leader>zc :action CollapseAllRegions<CR>
" nnoremap <leader>zo :action ExpandAllRegions<CR>
" nnoremap <leader>c :action CommentByLineComment<CR>
" nnoremap <leader>r :action Refactorings.QuickListPopupAction<CR>
" nnoremap <Leader>=  :action ReformatCode<CR>
" nnoremap <leader>o :action OptimizeImports<CR>
" nnoremap <c-r> :action RecentFiles<CR>
" nnoremap <leader>l :action RecentLocations<CR>
" nnoremap <leader>h  :action LocalHistory.ShowHistory<CR>
" nnoremap ge :action GotoNextError<CR>
" nnoremap gE :action GotoPreviousError<CR>
" nnoremap <c-/> :action FindInPath<CR>
" nnoremap <c-a> :action GotoAction<CR>
" nnoremap <c-f> :action GotoFile<CR>
" nnoremap <leader>u :action FindUsages<CR>
" nnoremap <leader>s :action GotoRelated<CR>
" nnoremap <leader>h :action CallHierarchy<CR>
" nnoremap <leader>b :action ShowNavBar<CR>
" nnoremap <c-s> :action FileStructurePopup<CR>
" nnoremap <c-o> :action GotoSymbol<CR>
" nnoremap gc :action GotoClass<CR>
" nnoremap gi :action GotoImplementation<CR>
" nnoremap gd :action GotToDeclaration<CR>
" nnoremap gp :action GotToSuperMethod<CR>
" nnoremap gt :action GotoTest<CR>
" nnoremap gb :action Back<CR>
" nnoremap gf :action Forward<CR>
" nnoremap <c-p> :action JumpToLastWindow<CR>
" nnoremap <c-x> :action HideAllWindows<CR>
" nnoremap ,r :action ContextRun<CR>
" nnoremap ,c :action RunClass<CR>
" nnoremap ,f :action ChooseRunConfiguration<CR>
" nnoremap ,t :action ActivateRunToolWindow<CR>
" nnoremap ,u :action Rerun<CR>
" nnoremap ,f :action RerunFailedTests<CR>
" nnoremap ,b :action ToggleLineBreakpoint<CR>
" nnoremap ,d :action ContextDebug<CR>
" nnoremap ,n :action ActivateDebugToolWindow<CR>
